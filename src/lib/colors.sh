make_request() {
  local api_key="$1"
  local json_payload="$2"
  local response=$(curl -s -X POST 'https://api.dehashed.com/v2/search' \
    --header "Dehashed-Api-Key: $api_key" \
    --header 'Content-Type: application/json' \
    --data-raw "$json_payload")

  if ! echo "$response" | jq -e . >/dev/null 2>&1; then
    printf "$(red "Error"): Invalid JSON response from API\n" >&2
    printf "Response: %s\n" "$response" >&2
    exit 1
  fi

  if echo "$response" | jq -e '.error' >/dev/null 2>&1; then
    error_msg=$(echo "$response" | jq -r '.error // .message // "Unknown error"')
    printf "$(red "API Error"): %s\n" "$error_msg" >&2
    exit 1
  fi

  echo "$response"
}

do_search() {
  local api_key=$(get_api_key)

  if [ "${argc_size:-100}" -gt 10000 ]; then
    printf "$(red "Error"): Size parameter cannot exceed 10000\n" >&2
    exit 1
  fi

  local query="${argc_query:-}"
  if [ -z "$query" ]; then
    printf "$(red "Error"): Search query is required\n" >&2
    show_help
    exit 1
  fi

  if [ -n "${argc_field:-}" ]; then
    if [[ "$query" == *":"* ]]; then
      printf "$(yellow "Warning"): Field specified via --field but query already contains field syntax\n" >&2
    else
      query="${argc_field}:${query}"
    fi
  fi

  local json_payload=$(jq -n \
    --arg query "$query" \
    --arg page "${argc_page:-1}" \
    --arg size "${argc_size:-100}" \
    --argjson regex "$([ "${argc_regex:-0}" = "1" ] && echo true || echo false)" \
    --argjson wildcard "$([ "${argc_wildcard:-0}" = "1" ] && echo true || echo false)" \
    --argjson dedupe "$([ "${argc_no_dedupe:-0}" = "1" ] && echo false || echo true)" \
    '{
      query: $query,
      page: ($page | tonumber),
      size: ($size | tonumber),
      regex: $regex,
      wildcard: $wildcard,
      de_dupe: $dedupe
    }')

  if [ "${argc_quiet:-0}" != "1" ]; then
    printf "$(bold_text "$(cyan "Searching Dehashed database...")")\n"
    printf "$(yellow "Query"): %s\n" "$query"
    printf "$(yellow "Page"): %s, $(yellow "Size"): %s\n" "${argc_page:-1}" "${argc_size:-10000}"
    if [ "${argc_regex:-0}" = "1" ]; then printf "$(yellow "Regex"): enabled\n"; fi
    if [ "${argc_wildcard:-0}" = "1" ]; then printf "$(yellow "Wildcard"): enabled\n"; fi
    printf "\n"
  fi

  local response=$(make_request "$api_key" "$json_payload")

  if [ "${argc_json:-0}" = "1" ]; then
    echo "$response" | jq
    exit 0
  fi

  if [ "${argc_csv:-0}" = "1" ]; then
    generate_csv "$response"
    exit 0
  fi

  format_search_results "$response"

  local total=$(echo "$response" | jq -r '.total // 0')
  local entries_count=$(echo "$response" | jq '.entries | length')
  
  if [ -z "$total" ] || [ "$total" = "null" ] || [ "$total" = "N/A" ]; then
    total=0
  fi
  
  if [ -z "$entries_count" ] || [ "$entries_count" = "null" ]; then
    entries_count=0
  fi
  
  if [ "$total" -gt 0 ] && [ "$entries_count" -eq 0 ] && [ "${argc_quiet:-0}" != "1" ]; then
    printf "$(yellow "Warning"): API reported ${total} results but returned no entries\n"
  elif [ "$total" -eq 0 ] && [ "${argc_quiet:-0}" != "1" ]; then
    show_examples
  fi

  if [ "${argc_quiet:-0}" != "1" ]; then
    local remaining=$(echo "$response" | jq -r '.remaining_requests // "N/A"')
    if [ "$remaining" != "N/A" ] && [ "$remaining" != "null" ]; then
      printf "\n$(bold_text "$(yellow "API Rate Limit")"): ${remaining} requests remaining\n"
    fi
  fi
}

# ARGC-BUILD {
# This block was generated by argc (https://github.com/sigoden/argc).
# Modifying it manually is not recommended

_argc_run() {
    if [[ "${1:-}" == "___internal___" ]]; then
        _argc_die "error: unsupported ___internal___ command"
    fi
    if [[ "${OS:-}" == "Windows_NT" ]] && [[ -n "${MSYSTEM:-}" ]]; then
        set -o igncr
    fi
    argc__args=("$(basename "$0" .sh)" "$@")
    argc__positionals=()
    _argc_index=1
    _argc_len="${#argc__args[@]}"
    _argc_tools=()
    _argc_parse
    if [ -n "${argc__fn:-}" ]; then
        $argc__fn "${argc__positionals[@]}"
    fi
}

_argc_usage() {
    cat <<-'EOF'
USAGE: api
EOF
    exit
}

_argc_version() {
    echo api 0.0.0
    exit
}

_argc_parse() {
    local _argc_key _argc_action
    local _argc_subcmds=""
    while [[ $_argc_index -lt $_argc_len ]]; do
        _argc_item="${argc__args[_argc_index]}"
        _argc_key="${_argc_item%%=*}"
        case "$_argc_key" in
        --help | -help | -h)
            _argc_usage
            ;;
        --version | -version | -V)
            _argc_version
            ;;
        --)
            _argc_dash="${#argc__positionals[@]}"
            argc__positionals+=("${argc__args[@]:$((_argc_index + 1))}")
            _argc_index=$_argc_len
            break
            ;;
        *)
            argc__positionals+=("$_argc_item")
            _argc_index=$((_argc_index + 1))
            ;;
        esac
    done
    if [[ -n "${_argc_action:-}" ]]; then
        $_argc_action
    else
        if [[ "${argc__positionals[0]:-}" == "help" ]] && [[ "${#argc__positionals[@]}" -eq 1 ]]; then
            _argc_usage
        fi
    fi
}

_argc_die() {
    if [[ $# -eq 0 ]]; then
        cat
    else
        echo "$*" >&2
    fi
    exit 1
}

_argc_run "$@"

# ARGC-BUILD }