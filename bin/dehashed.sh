#!/usr/bin/env bash

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "$SCRIPT_DIR/lib/colors.sh"
source "$SCRIPT_DIR/lib/config.sh"
source "$SCRIPT_DIR/lib/format.sh"
source "$SCRIPT_DIR/lib/help.sh"
source "$SCRIPT_DIR/lib/api.sh"

# @describe Search Dehashed database for leaked credentials and personal information
# @arg command "Command to run (search, help)" [string] @default "search"
# @arg query "Search query (e.g., 'email:user@domain.com', 'username:admin', 'domain:example.com')" [string]
# @option -k --api-key "Dehashed API key (can also use DEHASHED_API_KEY env var)" [string]
# @option -p --page "Page number for pagination" [int] @default "1"
# @option -s --size "Number of results per page (max 10000)" [int] @default "100"
# @option -f --field "Search specific field" [string] @choices "name,email,username,ip_address,password,hashed_password,vin,license_plate,address,phone,social,cryptocurrency_address,domain"
# @flag -r --regex "Enable regex search"
# @flag -w --wildcard "Enable wildcard search (use * for wildcards)"
# @flag --no-dedupe "Disable deduplication of results"
# @flag -j --json "Output raw JSON response"
# @flag -q --quiet "Suppress colored output and progress indicators"
# @flag --no-header "Don't display header information"
# @flag --csv "Output results in CSV format"
# @flag --show-raw "Include raw record data in output"
# @meta require-tools curl,jq

# ARGC-BUILD {
# This block was generated by argc (https://github.com/sigoden/argc).
# Modifying it manually is not recommended

_argc_run() {
    if [[ "${1:-}" == "___internal___" ]]; then
        _argc_die "error: unsupported ___internal___ command"
    fi
    if [[ "${OS:-}" == "Windows_NT" ]] && [[ -n "${MSYSTEM:-}" ]]; then
        set -o igncr
    fi
    argc__args=("$(basename "$0" .sh)" "$@")
    argc__positionals=()
    _argc_index=1
    _argc_len="${#argc__args[@]}"
    _argc_tools=()
    _argc_parse
    _argc_require_tools "${_argc_tools[@]}"
    if [ -n "${argc__fn:-}" ]; then
        $argc__fn "${argc__positionals[@]}"
    fi
}

_argc_usage() {
    cat <<-'EOF'
Search Dehashed database for leaked credentials and personal information

USAGE: dehashed [OPTIONS] [COMMAND] [QUERY]

ARGS:
  [COMMAND]  "Command to run (search, help)" [string] @default "search"
  [QUERY]    "Search query (e.g., 'email:user@domain.com', 'username:admin', 'domain:example.com')" [string]

OPTIONS:
  -k, --api-key <API-KEY>  "Dehashed API key (can also use DEHASHED_API_KEY env var)" [string]
  -p, --page <PAGE>        "Page number for pagination" [int] @default "1"
  -s, --size <SIZE>        "Number of results per page (max 10000)" [int] @default "100"
  -f, --field <FIELD>      "Search specific field" [string] @choices "name,email,username,ip_address,password,hashed_password,vin,license_plate,address,phone,social,cryptocurrency_address,domain"
  -r, --regex              "Enable regex search"
  -w, --wildcard           "Enable wildcard search (use * for wildcards)"
      --no-dedupe          "Disable deduplication of results"
  -j, --json               "Output raw JSON response"
  -q, --quiet              "Suppress colored output and progress indicators"
      --no-header          "Don't display header information"
      --csv                "Output results in CSV format"
      --show-raw           "Include raw record data in output"
  -h, --help               Print help
  -V, --version            Print version
EOF
    exit
}

_argc_version() {
    echo dehashed 0.0.0
    exit
}

_argc_parse() {
    local _argc_key _argc_action
    local _argc_subcmds=""
    while [[ $_argc_index -lt $_argc_len ]]; do
        _argc_item="${argc__args[_argc_index]}"
        _argc_key="${_argc_item%%=*}"
        case "$_argc_key" in
        --help | -help | -h)
            _argc_usage
            ;;
        --version | -version | -V)
            _argc_version
            ;;
        --)
            _argc_dash="${#argc__positionals[@]}"
            argc__positionals+=("${argc__args[@]:$((_argc_index + 1))}")
            _argc_index=$_argc_len
            break
            ;;
        --api-key | -k)
            _argc_take_args "--api-key <API-KEY>" 1 1 "-" ""
            _argc_index=$((_argc_index + _argc_take_args_len + 1))
            if [[ -z "${argc_api_key:-}" ]]; then
                argc_api_key="${_argc_take_args_values[0]:-}"
            else
                _argc_die "error: the argument \`--api-key\` cannot be used multiple times"
            fi
            ;;
        --page | -p)
            _argc_take_args "--page <PAGE>" 1 1 "-" ""
            _argc_index=$((_argc_index + _argc_take_args_len + 1))
            if [[ -z "${argc_page:-}" ]]; then
                argc_page="${_argc_take_args_values[0]:-}"
            else
                _argc_die "error: the argument \`--page\` cannot be used multiple times"
            fi
            ;;
        --size | -s)
            _argc_take_args "--size <SIZE>" 1 1 "-" ""
            _argc_index=$((_argc_index + _argc_take_args_len + 1))
            if [[ -z "${argc_size:-}" ]]; then
                argc_size="${_argc_take_args_values[0]:-}"
            else
                _argc_die "error: the argument \`--size\` cannot be used multiple times"
            fi
            ;;
        --field | -f)
            _argc_take_args "--field <FIELD>" 1 1 "-" ""
            _argc_index=$((_argc_index + _argc_take_args_len + 1))
            if [[ -z "${argc_field:-}" ]]; then
                argc_field="${_argc_take_args_values[0]:-}"
            else
                _argc_die "error: the argument \`--field\` cannot be used multiple times"
            fi
            ;;
        --regex | -r)
            if [[ "$_argc_item" == *=* ]]; then
                _argc_die "error: flag \`--regex\` don't accept any value"
            fi
            _argc_index=$((_argc_index + 1))
            if [[ -n "${argc_regex:-}" ]]; then
                _argc_die "error: the argument \`--regex\` cannot be used multiple times"
            else
                argc_regex=1
            fi
            ;;
        --wildcard | -w)
            if [[ "$_argc_item" == *=* ]]; then
                _argc_die "error: flag \`--wildcard\` don't accept any value"
            fi
            _argc_index=$((_argc_index + 1))
            if [[ -n "${argc_wildcard:-}" ]]; then
                _argc_die "error: the argument \`--wildcard\` cannot be used multiple times"
            else
                argc_wildcard=1
            fi
            ;;
        --no-dedupe)
            if [[ "$_argc_item" == *=* ]]; then
                _argc_die "error: flag \`--no-dedupe\` don't accept any value"
            fi
            _argc_index=$((_argc_index + 1))
            if [[ -n "${argc_no_dedupe:-}" ]]; then
                _argc_die "error: the argument \`--no-dedupe\` cannot be used multiple times"
            else
                argc_no_dedupe=1
            fi
            ;;
        --json | -j)
            if [[ "$_argc_item" == *=* ]]; then
                _argc_die "error: flag \`--json\` don't accept any value"
            fi
            _argc_index=$((_argc_index + 1))
            if [[ -n "${argc_json:-}" ]]; then
                _argc_die "error: the argument \`--json\` cannot be used multiple times"
            else
                argc_json=1
            fi
            ;;
        --quiet | -q)
            if [[ "$_argc_item" == *=* ]]; then
                _argc_die "error: flag \`--quiet\` don't accept any value"
            fi
            _argc_index=$((_argc_index + 1))
            if [[ -n "${argc_quiet:-}" ]]; then
                _argc_die "error: the argument \`--quiet\` cannot be used multiple times"
            else
                argc_quiet=1
            fi
            ;;
        --no-header)
            if [[ "$_argc_item" == *=* ]]; then
                _argc_die "error: flag \`--no-header\` don't accept any value"
            fi
            _argc_index=$((_argc_index + 1))
            if [[ -n "${argc_no_header:-}" ]]; then
                _argc_die "error: the argument \`--no-header\` cannot be used multiple times"
            else
                argc_no_header=1
            fi
            ;;
        --csv)
            if [[ "$_argc_item" == *=* ]]; then
                _argc_die "error: flag \`--csv\` don't accept any value"
            fi
            _argc_index=$((_argc_index + 1))
            if [[ -n "${argc_csv:-}" ]]; then
                _argc_die "error: the argument \`--csv\` cannot be used multiple times"
            else
                argc_csv=1
            fi
            ;;
        --show-raw)
            if [[ "$_argc_item" == *=* ]]; then
                _argc_die "error: flag \`--show-raw\` don't accept any value"
            fi
            _argc_index=$((_argc_index + 1))
            if [[ -n "${argc_show_raw:-}" ]]; then
                _argc_die "error: the argument \`--show-raw\` cannot be used multiple times"
            else
                argc_show_raw=1
            fi
            ;;
        *)
            if _argc_maybe_flag_option "-" "$_argc_item"; then
                _argc_die "error: unexpected argument \`$_argc_key\` found"
            fi
            argc__positionals+=("$_argc_item")
            _argc_index=$((_argc_index + 1))
            ;;
        esac
    done
    _argc_tools=(curl jq)
    if [[ -n "${_argc_action:-}" ]]; then
        $_argc_action
    else
        if [[ "${argc__positionals[0]:-}" == "help" ]] && [[ "${#argc__positionals[@]}" -eq 1 ]]; then
            _argc_usage
        fi
        _argc_match_positionals 0 0
        local values_index values_size
        IFS=: read -r values_index values_size <<<"${_argc_match_positionals_values[0]:-}"
        if [[ -n "$values_index" ]]; then
            argc_command="${argc__positionals[values_index]}"
        fi
        IFS=: read -r values_index values_size <<<"${_argc_match_positionals_values[1]:-}"
        if [[ -n "$values_index" ]]; then
            argc_query="${argc__positionals[values_index]}"
        fi
    fi
}

_argc_take_args() {
    _argc_take_args_values=()
    _argc_take_args_len=0
    local param="$1" min="$2" max="$3" signs="$4" delimiter="$5"
    if [[ "$min" -eq 0 ]] && [[ "$max" -eq 0 ]]; then
        return
    fi
    local _argc_take_index=$((_argc_index + 1)) _argc_take_value
    if [[ "$_argc_item" == *=* ]]; then
        _argc_take_args_values=("${_argc_item##*=}")
    else
        while [[ $_argc_take_index -lt $_argc_len ]]; do
            _argc_take_value="${argc__args[_argc_take_index]}"
            if _argc_maybe_flag_option "$signs" "$_argc_take_value"; then
                if [[ "${#_argc_take_value}" -gt 1 ]]; then
                    break
                fi
            fi
            _argc_take_args_values+=("$_argc_take_value")
            _argc_take_args_len=$((_argc_take_args_len + 1))
            if [[ "$_argc_take_args_len" -ge "$max" ]]; then
                break
            fi
            _argc_take_index=$((_argc_take_index + 1))
        done
    fi
    if [[ "${#_argc_take_args_values[@]}" -lt "$min" ]]; then
        _argc_die "error: incorrect number of values for \`$param\`"
    fi
    if [[ -n "$delimiter" ]] && [[ "${#_argc_take_args_values[@]}" -gt 0 ]]; then
        local item values arr=()
        for item in "${_argc_take_args_values[@]}"; do
            IFS="$delimiter" read -r -a values <<<"$item"
            arr+=("${values[@]}")
        done
        _argc_take_args_values=("${arr[@]}")
    fi
}

_argc_match_positionals() {
    _argc_match_positionals_values=()
    _argc_match_positionals_len=0
    local params=("$@")
    local args_len="${#argc__positionals[@]}"
    if [[ $args_len -eq 0 ]]; then
        return
    fi
    local params_len=$# arg_index=0 param_index=0
    while [[ $param_index -lt $params_len && $arg_index -lt $args_len ]]; do
        local takes=0
        if [[ "${params[param_index]}" -eq 1 ]]; then
            if [[ $param_index -eq 0 ]] &&
                [[ ${_argc_dash:-} -gt 0 ]] &&
                [[ $params_len -eq 2 ]] &&
                [[ "${params[$((param_index + 1))]}" -eq 1 ]] \
                ; then
                takes=${_argc_dash:-}
            else
                local arg_diff=$((args_len - arg_index)) param_diff=$((params_len - param_index))
                if [[ $arg_diff -gt $param_diff ]]; then
                    takes=$((arg_diff - param_diff + 1))
                else
                    takes=1
                fi
            fi
        else
            takes=1
        fi
        _argc_match_positionals_values+=("$arg_index:$takes")
        arg_index=$((arg_index + takes))
        param_index=$((param_index + 1))
    done
    if [[ $arg_index -lt $args_len ]]; then
        _argc_match_positionals_values+=("$arg_index:$((args_len - arg_index))")
    fi
    _argc_match_positionals_len=${#_argc_match_positionals_values[@]}
    if [[ $params_len -gt 0 ]] && [[ $_argc_match_positionals_len -gt $params_len ]]; then
        local index="${_argc_match_positionals_values[params_len]%%:*}"
        _argc_die "error: unexpected argument \`${argc__positionals[index]}\` found"
    fi
}

_argc_maybe_flag_option() {
    local signs="$1" arg="$2"
    if [[ -z "$signs" ]]; then
        return 1
    fi
    local cond=false
    if [[ "$signs" == *"+"* ]]; then
        if [[ "$arg" =~ ^\+[^+].* ]]; then
            cond=true
        fi
    elif [[ "$arg" == -* ]]; then
        if (( ${#arg} < 3 )) || [[ ! "$arg" =~ ^---.* ]]; then
            cond=true
        fi
    fi
    if [[ "$cond" == "false" ]]; then
        return 1
    fi
    local value="${arg%%=*}"
    if [[ "$value" =~ [[:space:]] ]]; then
        return 1
    fi
    return 0
}

_argc_require_tools() {
    local tool missing_tools=()
    for tool in "$@"; do
        if ! command -v "$tool" >/dev/null 2>&1; then
            missing_tools+=("$tool")
        fi
    done
    if [[ "${#missing_tools[@]}" -gt 0 ]]; then
        echo "error: missing tools: ${missing_tools[*]}" >&2
        exit 1
    fi
}

_argc_die() {
    if [[ $# -eq 0 ]]; then
        cat
    else
        echo "$*" >&2
    fi
    exit 1
}

_argc_run "$@"

# ARGC-BUILD }
set -euo pipefail

setup_colors


case "${argc_command:-search}" in
search)
  do_search
  ;;
help)
  show_help "${argc_query:-}"
  ;;
*)
  printf "$(red "Error"): Unknown command: ${argc_command}\n" >&2
  show_help
  exit 1
  ;;
esac
