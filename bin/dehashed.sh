#!/usr/bin/env bash

# @describe Search Dehashed database for leaked credentials and personal information
# @arg command "Command to run (search, help)" [string] @default "search"
# @arg query "Search query (e.g., 'email:user@domain.com', 'username:admin', 'domain:example.com')" [string]
# @option -k --api-key "Dehashed API key (can also use DEHASHED_API_KEY env var)" [string]
# @option -p --page "Page number for pagination" [int] @default "1"
# @option -s --size "Number of results per page (max 10000)" [int] @default "100"
# @option -f --field "Search specific field" [string] @choices "name,email,username,ip_address,password,hashed_password,vin,license_plate,address,phone,social,cryptocurrency_address,domain"
# @flag -r --regex "Enable regex search"
# @flag -w --wildcard "Enable wildcard search (use * for wildcards)"
# @flag --no-dedupe "Disable deduplication of results"
# @flag -j --json "Output raw JSON response"
# @flag -q --quiet "Suppress colored output and progress indicators"
# @flag --no-header "Don't display header information"
# @flag --csv "Output results in CSV format"
# @flag --show-raw "Include raw record data in output"
# @meta require-tools curl,jq

# ARGC-BUILD {
# This block was generated by argc (https://github.com/sigoden/argc).
# Modifying it manually is not recommended

_argc_run() {
    if [[ "${1:-}" == "___internal___" ]]; then
        _argc_die "error: unsupported ___internal___ command"
    fi
    if [[ "${OS:-}" == "Windows_NT" ]] && [[ -n "${MSYSTEM:-}" ]]; then
        set -o igncr
    fi
    argc__args=("$(basename "$0" .sh)" "$@")
    argc__positionals=()
    _argc_index=1
    _argc_len="${#argc__args[@]}"
    _argc_tools=()
    _argc_parse
    _argc_require_tools "${_argc_tools[@]}"
    if [ -n "${argc__fn:-}" ]; then
        $argc__fn "${argc__positionals[@]}"
    fi
}

_argc_usage() {
    cat <<-'EOF'
Search Dehashed database for leaked credentials and personal information

USAGE: dehashed [OPTIONS] [COMMAND] [QUERY]

ARGS:
  [COMMAND]  "Command to run (search, help)" [string] @default "search"
  [QUERY]    "Search query (e.g., 'email:user@domain.com', 'username:admin', 'domain:example.com')" [string]

OPTIONS:
  -k, --api-key <API-KEY>  "Dehashed API key (can also use DEHASHED_API_KEY env var)" [string]
  -p, --page <PAGE>        "Page number for pagination" [int] @default "1"
  -s, --size <SIZE>        "Number of results per page (max 10000)" [int] @default "100"
  -f, --field <FIELD>      "Search specific field" [string] @choices "name,email,username,ip_address,password,hashed_password,vin,license_plate,address,phone,social,cryptocurrency_address,domain"
  -r, --regex              "Enable regex search"
  -w, --wildcard           "Enable wildcard search (use * for wildcards)"
      --no-dedupe          "Disable deduplication of results"
  -j, --json               "Output raw JSON response"
  -q, --quiet              "Suppress colored output and progress indicators"
      --no-header          "Don't display header information"
      --csv                "Output results in CSV format"
      --show-raw           "Include raw record data in output"
  -h, --help               Print help
  -V, --version            Print version
EOF
    exit
}

_argc_version() {
    echo dehashed 0.0.0
    exit
}

_argc_parse() {
    local _argc_key _argc_action
    local _argc_subcmds=""
    while [[ $_argc_index -lt $_argc_len ]]; do
        _argc_item="${argc__args[_argc_index]}"
        _argc_key="${_argc_item%%=*}"
        case "$_argc_key" in
        --help | -help | -h)
            _argc_usage
            ;;
        --version | -version | -V)
            _argc_version
            ;;
        --)
            _argc_dash="${#argc__positionals[@]}"
            argc__positionals+=("${argc__args[@]:$((_argc_index + 1))}")
            _argc_index=$_argc_len
            break
            ;;
        --api-key | -k)
            _argc_take_args "--api-key <API-KEY>" 1 1 "-" ""
            _argc_index=$((_argc_index + _argc_take_args_len + 1))
            if [[ -z "${argc_api_key:-}" ]]; then
                argc_api_key="${_argc_take_args_values[0]:-}"
            else
                _argc_die "error: the argument \`--api-key\` cannot be used multiple times"
            fi
            ;;
        --page | -p)
            _argc_take_args "--page <PAGE>" 1 1 "-" ""
            _argc_index=$((_argc_index + _argc_take_args_len + 1))
            if [[ -z "${argc_page:-}" ]]; then
                argc_page="${_argc_take_args_values[0]:-}"
            else
                _argc_die "error: the argument \`--page\` cannot be used multiple times"
            fi
            ;;
        --size | -s)
            _argc_take_args "--size <SIZE>" 1 1 "-" ""
            _argc_index=$((_argc_index + _argc_take_args_len + 1))
            if [[ -z "${argc_size:-}" ]]; then
                argc_size="${_argc_take_args_values[0]:-}"
            else
                _argc_die "error: the argument \`--size\` cannot be used multiple times"
            fi
            ;;
        --field | -f)
            _argc_take_args "--field <FIELD>" 1 1 "-" ""
            _argc_index=$((_argc_index + _argc_take_args_len + 1))
            if [[ -z "${argc_field:-}" ]]; then
                argc_field="${_argc_take_args_values[0]:-}"
            else
                _argc_die "error: the argument \`--field\` cannot be used multiple times"
            fi
            ;;
        --regex | -r)
            if [[ "$_argc_item" == *=* ]]; then
                _argc_die "error: flag \`--regex\` don't accept any value"
            fi
            _argc_index=$((_argc_index + 1))
            if [[ -n "${argc_regex:-}" ]]; then
                _argc_die "error: the argument \`--regex\` cannot be used multiple times"
            else
                argc_regex=1
            fi
            ;;
        --wildcard | -w)
            if [[ "$_argc_item" == *=* ]]; then
                _argc_die "error: flag \`--wildcard\` don't accept any value"
            fi
            _argc_index=$((_argc_index + 1))
            if [[ -n "${argc_wildcard:-}" ]]; then
                _argc_die "error: the argument \`--wildcard\` cannot be used multiple times"
            else
                argc_wildcard=1
            fi
            ;;
        --no-dedupe)
            if [[ "$_argc_item" == *=* ]]; then
                _argc_die "error: flag \`--no-dedupe\` don't accept any value"
            fi
            _argc_index=$((_argc_index + 1))
            if [[ -n "${argc_no_dedupe:-}" ]]; then
                _argc_die "error: the argument \`--no-dedupe\` cannot be used multiple times"
            else
                argc_no_dedupe=1
            fi
            ;;
        --json | -j)
            if [[ "$_argc_item" == *=* ]]; then
                _argc_die "error: flag \`--json\` don't accept any value"
            fi
            _argc_index=$((_argc_index + 1))
            if [[ -n "${argc_json:-}" ]]; then
                _argc_die "error: the argument \`--json\` cannot be used multiple times"
            else
                argc_json=1
            fi
            ;;
        --quiet | -q)
            if [[ "$_argc_item" == *=* ]]; then
                _argc_die "error: flag \`--quiet\` don't accept any value"
            fi
            _argc_index=$((_argc_index + 1))
            if [[ -n "${argc_quiet:-}" ]]; then
                _argc_die "error: the argument \`--quiet\` cannot be used multiple times"
            else
                argc_quiet=1
            fi
            ;;
        --no-header)
            if [[ "$_argc_item" == *=* ]]; then
                _argc_die "error: flag \`--no-header\` don't accept any value"
            fi
            _argc_index=$((_argc_index + 1))
            if [[ -n "${argc_no_header:-}" ]]; then
                _argc_die "error: the argument \`--no-header\` cannot be used multiple times"
            else
                argc_no_header=1
            fi
            ;;
        --csv)
            if [[ "$_argc_item" == *=* ]]; then
                _argc_die "error: flag \`--csv\` don't accept any value"
            fi
            _argc_index=$((_argc_index + 1))
            if [[ -n "${argc_csv:-}" ]]; then
                _argc_die "error: the argument \`--csv\` cannot be used multiple times"
            else
                argc_csv=1
            fi
            ;;
        --show-raw)
            if [[ "$_argc_item" == *=* ]]; then
                _argc_die "error: flag \`--show-raw\` don't accept any value"
            fi
            _argc_index=$((_argc_index + 1))
            if [[ -n "${argc_show_raw:-}" ]]; then
                _argc_die "error: the argument \`--show-raw\` cannot be used multiple times"
            else
                argc_show_raw=1
            fi
            ;;
        *)
            if _argc_maybe_flag_option "-" "$_argc_item"; then
                _argc_die "error: unexpected argument \`$_argc_key\` found"
            fi
            argc__positionals+=("$_argc_item")
            _argc_index=$((_argc_index + 1))
            ;;
        esac
    done
    _argc_tools=(curl jq)
    if [[ -n "${_argc_action:-}" ]]; then
        $_argc_action
    else
        if [[ "${argc__positionals[0]:-}" == "help" ]] && [[ "${#argc__positionals[@]}" -eq 1 ]]; then
            _argc_usage
        fi
        _argc_match_positionals 0 0
        local values_index values_size
        IFS=: read -r values_index values_size <<<"${_argc_match_positionals_values[0]:-}"
        if [[ -n "$values_index" ]]; then
            argc_command="${argc__positionals[values_index]}"
        fi
        IFS=: read -r values_index values_size <<<"${_argc_match_positionals_values[1]:-}"
        if [[ -n "$values_index" ]]; then
            argc_query="${argc__positionals[values_index]}"
        fi
    fi
}

_argc_take_args() {
    _argc_take_args_values=()
    _argc_take_args_len=0
    local param="$1" min="$2" max="$3" signs="$4" delimiter="$5"
    if [[ "$min" -eq 0 ]] && [[ "$max" -eq 0 ]]; then
        return
    fi
    local _argc_take_index=$((_argc_index + 1)) _argc_take_value
    if [[ "$_argc_item" == *=* ]]; then
        _argc_take_args_values=("${_argc_item##*=}")
    else
        while [[ $_argc_take_index -lt $_argc_len ]]; do
            _argc_take_value="${argc__args[_argc_take_index]}"
            if _argc_maybe_flag_option "$signs" "$_argc_take_value"; then
                if [[ "${#_argc_take_value}" -gt 1 ]]; then
                    break
                fi
            fi
            _argc_take_args_values+=("$_argc_take_value")
            _argc_take_args_len=$((_argc_take_args_len + 1))
            if [[ "$_argc_take_args_len" -ge "$max" ]]; then
                break
            fi
            _argc_take_index=$((_argc_take_index + 1))
        done
    fi
    if [[ "${#_argc_take_args_values[@]}" -lt "$min" ]]; then
        _argc_die "error: incorrect number of values for \`$param\`"
    fi
    if [[ -n "$delimiter" ]] && [[ "${#_argc_take_args_values[@]}" -gt 0 ]]; then
        local item values arr=()
        for item in "${_argc_take_args_values[@]}"; do
            IFS="$delimiter" read -r -a values <<<"$item"
            arr+=("${values[@]}")
        done
        _argc_take_args_values=("${arr[@]}")
    fi
}

_argc_match_positionals() {
    _argc_match_positionals_values=()
    _argc_match_positionals_len=0
    local params=("$@")
    local args_len="${#argc__positionals[@]}"
    if [[ $args_len -eq 0 ]]; then
        return
    fi
    local params_len=$# arg_index=0 param_index=0
    while [[ $param_index -lt $params_len && $arg_index -lt $args_len ]]; do
        local takes=0
        if [[ "${params[param_index]}" -eq 1 ]]; then
            if [[ $param_index -eq 0 ]] &&
                [[ ${_argc_dash:-} -gt 0 ]] &&
                [[ $params_len -eq 2 ]] &&
                [[ "${params[$((param_index + 1))]}" -eq 1 ]] \
                ; then
                takes=${_argc_dash:-}
            else
                local arg_diff=$((args_len - arg_index)) param_diff=$((params_len - param_index))
                if [[ $arg_diff -gt $param_diff ]]; then
                    takes=$((arg_diff - param_diff + 1))
                else
                    takes=1
                fi
            fi
        else
            takes=1
        fi
        _argc_match_positionals_values+=("$arg_index:$takes")
        arg_index=$((arg_index + takes))
        param_index=$((param_index + 1))
    done
    if [[ $arg_index -lt $args_len ]]; then
        _argc_match_positionals_values+=("$arg_index:$((args_len - arg_index))")
    fi
    _argc_match_positionals_len=${#_argc_match_positionals_values[@]}
    if [[ $params_len -gt 0 ]] && [[ $_argc_match_positionals_len -gt $params_len ]]; then
        local index="${_argc_match_positionals_values[params_len]%%:*}"
        _argc_die "error: unexpected argument \`${argc__positionals[index]}\` found"
    fi
}

_argc_maybe_flag_option() {
    local signs="$1" arg="$2"
    if [[ -z "$signs" ]]; then
        return 1
    fi
    local cond=false
    if [[ "$signs" == *"+"* ]]; then
        if [[ "$arg" =~ ^\+[^+].* ]]; then
            cond=true
        fi
    elif [[ "$arg" == -* ]]; then
        if (( ${#arg} < 3 )) || [[ ! "$arg" =~ ^---.* ]]; then
            cond=true
        fi
    fi
    if [[ "$cond" == "false" ]]; then
        return 1
    fi
    local value="${arg%%=*}"
    if [[ "$value" =~ [[:space:]] ]]; then
        return 1
    fi
    return 0
}

_argc_require_tools() {
    local tool missing_tools=()
    for tool in "$@"; do
        if ! command -v "$tool" >/dev/null 2>&1; then
            missing_tools+=("$tool")
        fi
    done
    if [[ "${#missing_tools[@]}" -gt 0 ]]; then
        echo "error: missing tools: ${missing_tools[*]}" >&2
        exit 1
    fi
}

_argc_die() {
    if [[ $# -eq 0 ]]; then
        cat
    else
        echo "$*" >&2
    fi
    exit 1
}

_argc_run "$@"

# ARGC-BUILD }

set -euo pipefail

setup_colors() {
  if [ "${argc_quiet:-0}" = 1 ] || [ -z "$TERM" ] || [ "$TERM" = "dumb" ]; then
    bold="" reset="" blue="" green="" yellow="" cyan="" magenta="" red="" white=""
  else
    bold=$(tput bold) reset=$(tput sgr0) blue=$(tput setaf 4) green=$(tput setaf 2)
    yellow=$(tput setaf 3) cyan=$(tput setaf 6) magenta=$(tput setaf 5) red=$(tput setaf 1)
  fi
}
setup_colors

# Color formatting functions
bold_text() {
  printf "${bold}%s${reset}" "$1"
}

red() {
  printf "${red}%s${reset}" "$1"
}

green() {
  printf "${green}%s${reset}" "$1"
}

yellow() {
  printf "${yellow}%s${reset}" "$1"
}

blue() {
  printf "${blue}%s${reset}" "$1"
}

cyan() {
  printf "${cyan}%s${reset}" "$1"
}

magenta() {
  printf "${magenta}%s${reset}" "$1"
}

print_kv() {
  printf "$(bold_text "$1"): %s\n" "$2"
}

print_section() {
  printf "\n$(bold_text "$1"):\n"
}

format_case() {
  echo "$(tr '[:lower:]' '[:upper:]' <<<${1:0:1})${1:1}"
}

get_api_key() {
  local key=""

  if [ -n "${argc_api_key:-}" ]; then
    key="$argc_api_key"
  elif [ -n "${DEHASHED_API_KEY:-}" ]; then
    key="$DEHASHED_API_KEY"
  elif [ -f "$HOME/.config/dehashed/api_key" ]; then
    key=$(cat "$HOME/.config/dehashed/api_key")
  fi

  if [ -n "$key" ]; then
    echo "$key"
  else
    printf "$(red "Error"): No Dehashed API key found.\n" >&2
    printf "Please provide your API key using one of these methods:\n" >&2
    printf "  1. Pass it with $(yellow "--api-key")\n" >&2
    printf "  2. Set $(yellow "DEHASHED_API_KEY") environment variable\n" >&2
    printf "  3. Save it to $(yellow "~/.config/dehashed/api_key")\n" >&2
    exit 1
  fi
}

make_request() {
  local api_key="$1"
  local json_payload="$2"
  local response=$(curl -s -X POST 'https://api.dehashed.com/v2/search' \
    --header "Dehashed-Api-Key: $api_key" \
    --header 'Content-Type: application/json' \
    --data-raw "$json_payload")

  if ! echo "$response" | jq -e . >/dev/null 2>&1; then
    printf "$(red "Error"): Invalid JSON response from API\n" >&2
    printf "Response: %s\n" "$response" >&2
    exit 1
  fi

  if echo "$response" | jq -e '.error' >/dev/null 2>&1; then
    error_msg=$(echo "$response" | jq -r '.error // .message // "Unknown error"')
    printf "$(red "API Error"): %s\n" "$error_msg" >&2
    exit 1
  fi

  echo "$response"
}

show_help() {
  local command="${1:-}"

  echo "$(bold_text "Dehashed API Client")"
  echo ""

  if [ -z "$command" ] || [ "$command" = "help" ]; then
    echo "$(bold_text "Description"):"
    echo "  Search the Dehashed database for leaked credentials and personal information"
    echo ""
    echo "$(bold_text "Usage"):"
    echo "  $(green "$(basename "$0") search <query>")"
    echo "  $(green "$(basename "$0") help")"
    echo ""
    echo "$(bold_text "Commands"):"
    echo "  $(cyan "search")        Search for leaked credentials (default command)"
    echo "  $(cyan "help")          Show this help information"
    echo ""
    echo "$(bold_text "Examples"):"
    echo "  $(green "$(basename "$0") search email:user@example.com")"
    echo "  $(green "$(basename "$0") search username:admin")"
    echo "  $(green "$(basename "$0") search domain:example.com")"
    echo "  $(green "$(basename "$0") search ip_address:192.168.1.1")"
    echo "  $(green "$(basename "$0") search \"name:John Doe\"")"
    echo ""
    echo "$(bold_text "Options"):"
    echo "  $(yellow "-k, --api-key")     Dehashed API key"
    echo "  $(yellow "-p, --page")        Page number for pagination"
    echo "  $(yellow "-s, --size")        Number of results per page (max 10000)"
    echo "  $(yellow "-f, --field")       Search specific field"
    echo "  $(yellow "-r, --regex")       Enable regex search"
    echo "  $(yellow "-w, --wildcard")    Enable wildcard search (use * for wildcards)"
    echo "  $(yellow "--no-dedupe")       Disable deduplication of results"
    echo "  $(yellow "-j, --json")        Output raw JSON response"
    echo "  $(yellow "-q, --quiet")       Suppress colored output"
    echo "  $(yellow "--no-header")       Don't display header information"
    echo "  $(yellow "--csv")             Output results in CSV format"
    echo "  $(yellow "--show-raw")        Include raw record data in output"
    echo ""
    echo "$(bold_text "Available Fields"):"
    echo "  $(cyan "name")                Person's name"
    echo "  $(cyan "email")               Email address"
    echo "  $(cyan "username")            Username"
    echo "  $(cyan "password")            Clear text password"
    echo "  $(cyan "hashed_password")     Hashed password"
    echo "  $(cyan "ip_address")          IP address"
    echo "  $(cyan "phone")               Phone number"
    echo "  $(cyan "address")             Physical address"
    echo "  $(cyan "social")              Social security number"
    echo "  $(cyan "domain")              Domain name"
    echo "  $(cyan "vin")                 Vehicle identification number"
    echo "  $(cyan "license_plate")       License plate number"
    echo "  $(cyan "cryptocurrency_address") Cryptocurrency wallet address"
    echo ""
    echo "$(bold_text "Wildcard Examples"):"
    echo "  $(green "$(basename "$0") search \"email:*@gmail.com\" --wildcard")"
    echo "  $(green "$(basename "$0") search \"username:admin*\" --wildcard")"
  fi
}

format_search_results() {
  local response="$1"
  local balance=$(echo "$response" | jq -r '.balance // "N/A"')
  local total=$(echo "$response" | jq -r '.total // 0')
  local took=$(echo "$response" | jq -r '.took // "N/A"')

  if [ "${argc_no_header:-0}" != "1" ] && [ "${argc_quiet:-0}" != "1" ]; then
    printf "$(bold_text "$(green "=== Dehashed Search Results ===")")\n"
    printf "$(yellow "Balance"): %s credits\n" "$balance"
    printf "$(yellow "Total Results"): %s\n" "$total"
    printf "$(yellow "Query Time"): %s\n" "$took"
    printf "\n"
  fi

  if [ -z "$total" ] || [ "$total" = "null" ] || [ "$total" = "N/A" ]; then
    total=0
  fi
  
  if [ "$total" -eq 0 ]; then
    printf "$(yellow "No results found for query: ${argc_query:-}")\n"
    return 0
  fi

  local tmp_file=$(mktemp)
  echo "$response" | jq -c '.entries[]' > "$tmp_file"
  
  while read -r entry; do

    id=$(echo "$entry" | jq -r '.id // "N/A"')
    database_name=$(echo "$entry" | jq -r '.database_name // "N/A"')

    printf "$(yellow "ID"): %s\n" "$id"
    printf "$(yellow "Database"): %s\n" "$database_name"

    fields=("email" "username" "name" "password" "hashed_password" "ip_address" "phone" "address" "social" "cryptocurrency_address" "license_plate" "vin" "dob" "company" "url")

    for field in "${fields[@]}"; do
      values=$(echo "$entry" | jq -r --arg field "$field" '
        if has($field) then
          if .[$field] | type == "array" then 
            .[$field] | if length > 0 then join(", ") else empty end
          elif .[$field] | type == "string" then
            if .[$field] == "" then empty else .[$field] end
          elif .[$field] | type == "number" then
            .[$field] | tostring
          else
            .[$field] | tostring
          end
        else
          empty
        end')

      if [ -n "$values" ]; then
        formatted_field=$(echo "$field" | tr '_' ' ' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2))}1')
        case "$field" in
        "password" | "hashed_password")
          printf "$(yellow "$formatted_field"): $(red "$values")\n"
          ;;
        "email" | "username")
          printf "$(yellow "$formatted_field"): $(blue "$values")\n"
          ;;
        "ip_address" | "cryptocurrency_address")
          printf "$(yellow "$formatted_field"): $(magenta "$values")\n"
          ;;
        *)
          printf "$(yellow "$formatted_field"): %s\n" "$values"
          ;;
        esac
      fi
    done

    if [ "${argc_show_raw:-0}" = "1" ]; then
      if echo "$entry" | jq 'has("raw_record")' | grep -q "true"; then
        printf "$(yellow "Raw Record"):\n"
        echo "$entry" | jq '.raw_record' | sed 's/^/  /'
      fi
    fi

    printf "\n"
  done < "$tmp_file"
  
  rm -f "$tmp_file"

  if [ -z "$total" ] || [ "$total" = "null" ] || [ "$total" = "N/A" ]; then
    total=0
  fi
  
  size="${argc_size:-100}"
  if [ -z "$size" ] || [ "$size" = "null" ]; then
    size=100
  fi
  
  if [ "${argc_quiet:-0}" != "1" ] && [ "$total" -gt "$size" ]; then
    page="${argc_page:-1}"
    if [ -z "$page" ] || [ "$page" = "null" ]; then
      page=1
    fi
    
    current_end=$((page * size))
    if [ "$current_end" -gt "$total" ]; then
      current_end="$total"
    fi
    current_start=$(((page - 1) * size + 1))

    printf "$(bold_text "$(yellow "Showing results $current_start-$current_end of $total")")\n"

    if [ "$current_end" -lt "$total" ]; then
      next_page=$((page + 1))
      printf "$(cyan "To see more results, use: --page $next_page")\n"
    fi
  fi
}

generate_csv() {
  local response="$1"
  printf "id,database_name,email,username,name,password,hashed_password,ip_address,phone,address,social,cryptocurrency_address,license_plate,vin,dob,company,url\n"
  echo "$response" | jq -r '.entries[] |
    [
      .id,
      .database_name,
      (.email // [] | join(";")),
      (.username // [] | join(";")),
      (.name // [] | join(";")),
      (.password // [] | join(";")),
      (.hashed_password // [] | join(";")),
      (.ip_address // [] | join(";")),
      (.phone // [] | join(";")),
      (.address // [] | join(";")),
      (.social // [] | join(";")),
      (.cryptocurrency_address // [] | join(";")),
      (.license_plate // [] | join(";")),
      (.vin // [] | join(";")),
      (.dob // [] | join(";")),
      (.company // [] | join(";")),
      (.url // [] | join(";"))
    ] | @csv'
}

show_examples() {
  printf "\n$(bold_text "$(yellow "Example queries"):"):\n"
  printf "  $(cyan "email:user@example.com")         # Search by email\n"
  printf "  $(cyan "username:admin")                 # Search by username\n"
  printf "  $(cyan "domain:example.com")             # Search by domain\n"
  printf "  $(cyan "ip_address:192.168.1.1")         # Search by IP\n"
  printf "  $(cyan "name:\"John Doe\"")                # Search by name (quoted for spaces)\n"
  printf "  $(cyan "password:123456")                # Search by password\n"
  printf "\n$(bold_text "$(yellow "Wildcard examples"):"):\n"
  printf "  $(cyan "email:*@gmail.com --wildcard")   # All Gmail addresses\n"
  printf "  $(cyan "username:admin* --wildcard")     # Usernames starting with 'admin'\n"
}

do_search() {
  local api_key=$(get_api_key)

  if [ "${argc_size:-100}" -gt 10000 ]; then
    printf "$(red "Error"): Size parameter cannot exceed 10000\n" >&2
    exit 1
  fi

  local query="${argc_query:-}"
  if [ -z "$query" ]; then
    printf "$(red "Error"): Search query is required\n" >&2
    show_help
    exit 1
  fi

  if [ -n "${argc_field:-}" ]; then
    if [[ "$query" == *":"* ]]; then
      printf "$(yellow "Warning"): Field specified via --field but query already contains field syntax\n" >&2
    else
      query="${argc_field}:${query}"
    fi
  fi

  local json_payload=$(jq -n \
    --arg query "$query" \
    --arg page "${argc_page:-1}" \
    --arg size "${argc_size:-100}" \
    --argjson regex "$([ "${argc_regex:-0}" = "1" ] && echo true || echo false)" \
    --argjson wildcard "$([ "${argc_wildcard:-0}" = "1" ] && echo true || echo false)" \
    --argjson dedupe "$([ "${argc_no_dedupe:-0}" = "1" ] && echo false || echo true)" \
    '{
      query: $query,
      page: ($page | tonumber),
      size: ($size | tonumber),
      regex: $regex,
      wildcard: $wildcard,
      de_dupe: $dedupe
    }')

  if [ "${argc_quiet:-0}" != "1" ]; then
    printf "$(bold_text "$(cyan "Searching Dehashed database...")")\n"
    printf "$(yellow "Query"): %s\n" "$query"
    printf "$(yellow "Page"): %s, $(yellow "Size"): %s\n" "${argc_page:-1}" "${argc_size:-10000}"
    if [ "${argc_regex:-0}" = "1" ]; then printf "$(yellow "Regex"): enabled\n"; fi
    if [ "${argc_wildcard:-0}" = "1" ]; then printf "$(yellow "Wildcard"): enabled\n"; fi
    printf "\n"
  fi

  local response=$(make_request "$api_key" "$json_payload")

  if [ "${argc_json:-0}" = "1" ]; then
    echo "$response" | jq
    exit 0
  fi

  if [ "${argc_csv:-0}" = "1" ]; then
    generate_csv "$response"
    exit 0
  fi

  format_search_results "$response"

  local total=$(echo "$response" | jq -r '.total // 0')
  local entries_count=$(echo "$response" | jq '.entries | length')
  
  if [ -z "$total" ] || [ "$total" = "null" ] || [ "$total" = "N/A" ]; then
    total=0
  fi
  
  if [ -z "$entries_count" ] || [ "$entries_count" = "null" ]; then
    entries_count=0
  fi
  
  if [ "$total" -gt 0 ] && [ "$entries_count" -eq 0 ] && [ "${argc_quiet:-0}" != "1" ]; then
    printf "$(yellow "Warning"): API reported ${total} results but returned no entries\n"
  elif [ "$total" -eq 0 ] && [ "${argc_quiet:-0}" != "1" ]; then
    show_examples
  fi

  if [ "${argc_quiet:-0}" != "1" ]; then
    local remaining=$(echo "$response" | jq -r '.remaining_requests // "N/A"')
    if [ "$remaining" != "N/A" ] && [ "$remaining" != "null" ]; then
      printf "\n$(bold_text "$(yellow "API Rate Limit")"): ${remaining} requests remaining\n"
    fi
  fi
}

case "${argc_command:-search}" in
search)
  do_search
  ;;
help)
  show_help "${argc_query:-}"
  ;;
*)
  printf "$(red "Error"): Unknown command: ${argc_command}\n" >&2
  show_help
  exit 1
  ;;
esac
